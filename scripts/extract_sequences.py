#!/usr/bin/env python
"""Extract raw data from the MBS files.

Given a list of PTNT_ID, this script aims at extracting a sequence of MBS
services usage of each individual. A possible list may be something like:

    123: 'G0P1P0D2'

where, 123 is a patient id; G, P and D are different modified broad type of
service BOTS-4D; while 0, 1, etc are the timespan between the two examinations.
So, MBS items in odd position and timespan between any two of them in even
positions.

The encoding of the MBS items is reported in the column BTOS-4D, where 4D stands
for "for diabetes" and it is a modified BTOS naming (see also
data/btos_details.csv and notebooks/BTOS-4D.ipynb):
-----------------------------------------------------------------------------------
BTOS (Heirarchy order) | BTOS NAME	                                      | BTOS-4D
-----------------------------------------------------------------------------------
101	                   | Non-referred attendances GP/VR                   | G
102	                   | Non-referred attendances - Enhanced Primary Care | G
103	                   | Non-referred attendances - Other                 | G
110	                   | Non-referred attendances - Practice Nurse Items  |	G
150	                   | Other Allied Health                              |	L
200	                   | Specialist attendances	Specialist attendances    |	E
300	                   | Obstetrics	                                      |	B
400	                   | Anaesthetics                                     |	S
501	                   | Pathology Collection Items	                      | P
502	                   | Pathology Tests                                  | P
600	                   | Diagnostic Imaging	                              | I
700	                   | Operations                                       | S
800	                   | Assistance at Operations                         | S
900	                   | Optometry                                        | O
1000	               | Radiotherapy and Therapeutic Nuclear Medicine    | T
1100	               | Other MBS services                               | T
xxxx                   | Diabetes-related treatments                      | D
xxxx                   | HbA1c test                                       | H
xxxx                   | Health assessment for people 40-49 years at risk | R
-----------------------------------------------------------------------------------

Diabetes-related treatments includes items like (see notebooks/BTOS-4D.ipynb):
- Completion of an annual cycle of care for patients with established diabetes mellitus
- Examination of the eyes of a patient with diabetes mellitus
- Group allied health services for people with Type 2 diabetes

Other symbols are:
+ HbA1c test
+ Health Assessment provided as a type 2 diabetes risk evaluation for people aged 40-49 years with a high risk of developing type 2 diabetes as determined by the Australian Type 2 Diabetes Risk Assessment Tool

There are a total number of 12 unique symbols: [B, E, D, G, I, H, L, O, P, S, R, T]

The dictionary for the timespan is here (see `raw_data_utils.timespan_encoding`):
--------------------------------
Time duration        | Encoding
--------------------------------
[same day - 2 weeks] | 0
(2 weeks  - 1 month] | 1
(1 month  - 3 monts] | 2
(3 months - 1 year]  | 3
more than 1 year     | 4
--------------------------------

Remarks:
- PTNT_ID in PBS is referred to as PIN in MBS.
"""

from __future__ import print_function

import argparse
import cPickle as pkl
import os

import mbspbs10pc.raw_data_utils as utils
from mbspbs10pc.utils import check_input


def parse_arguments():
    """"Parse input arguments."""
    parser = argparse.ArgumentParser(description='MBS-PBS 10% data/labels '
                                                 'extraction.')
    parser.add_argument('-r', '--root', type=str,
                        help='Dataset root folder (default=../../data).',
                        default=None)
    parser.add_argument('-s', '--source', type=str,
                        help='The PTNT_ID csv file generated by '
                        'labels_assignment.py.',
                        default=None)
    parser.add_argument('-ep', '--exclude_pregnancy', action='store_true',
                        help='Exclude subjects that underwent '
                        ' pregnancy-related tests.')
    parser.add_argument('-o', '--output', type=str,
                        help='Ouput file name root.',
                        default=None)
    parser.add_argument('-sic', '--skip_input_check', action='store_false',
                        help='Skip the input check (default=False).')
    parser.add_argument('-nj', '--n_jobs', type=int,
                        help='The number of processes to use.', default=4)
    args = parser.parse_args()
    return args


def init_main():
    """Initialize the main routine."""
    args = parse_arguments()

    if args.source is None or not os.path.exists(args.source):
        raise ValueError('{} is not a valid PTNT_ID csv file'.format(args.source))

    # Check input dataset
    if args.root is None:
        args.root = os.path.join('..', '..', 'data')
    if args.skip_input_check: check_input(args.root)

    # Check output filename
    if args.output is None:
        args.output = args.source[:-4]+'_'

    return args


def main():
    """Main find_concessionas.py routine."""
    print('-------------------------------------------------------------------')
    print('MBS - PBS 10% dataset utility: extract_sequences.py')
    print('-------------------------------------------------------------------')
    args = init_main()

    print('* Root data folder: {}'.format(args.root))
    print('* PTNT_ID list: {}'.format(args.source))
    print('* Output files: {}.pkl'.format(args.output))
    print('* Number of jobs: {}'.format(args.n_jobs))

    print('[{}] Exclude pregnancy: {}'.format(*('+', 'ON') if args.exclude_pregnancy else (' ', 'OFF')))
    print('-------------------------------------------------------------------')

    # MBS 10% dataset files
    mbs_files = filter(lambda x: x.startswith('MBS'), os.listdir(args.root))
    mbs_files_fullpath = [os.path.join(args.root, mbs) for mbs in mbs_files]
    sample_pin_lookout = filter(lambda x: x.startswith('SAMPLE'),
                                os.listdir(args.root))[0]

    # Get the features
    filename = args.output+'_raw_data_.pkl'
    if not os.path.exists(filename):
        raw_data = utils.get_raw_data(mbs_files_fullpath,
                                      os.path.join(args.root,
                                                   sample_pin_lookout),
                                      exclude_pregnancy=args.exclude_pregnancy,
                                      source=args.source)
        print('* Saving {} '.format(filename), end=' ')
        pkl.dump(raw_data, open(filename, 'wb'))
        print(u'\u2713')


################################################################################

if __name__ == '__main__':
    main()
