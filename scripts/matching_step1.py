#!/usr/bin/env python
"""Prepare the dataframe for the R package CEM.

Our aim is to perform sample matching using the R package CEM. The matching
will be performed on the following variables:
    * Average AGE during treatment
    * Gender
    * Last State (VIC, NSW, ...)
    * Length of the extracted sequence

This script simply loads raw sequences and extra info generated by
`extracted_sequences.py` and prepares the dataframe for the R package CEM
(see: https://cran.r-project.org/web/packages/cem/vignettes/cem.pdf)
"""

from __future__ import print_function

import argparse
import joblib as jl
import os

import pandas as pd
from tqdm import tqdm


def parse_arguments():
    """"Parse input arguments."""
    parser = argparse.ArgumentParser(description='MBS-PBS 10% data/labels '
                                                 'extraction.')
    parser.add_argument('-s', '--source', type=str,
                        help='Raw data generated by `extract_sequences.py` '
                        'source folder.', default=None)
    parser.add_argument('-o', '--output', type=str,
                        help='Ouput file name root.',
                        default=None)
    args = parser.parse_args()
    return args


def init_main():
    """Initialize the main routine."""
    args = parse_arguments()

    # Check source directory
    if args.source is None or not os.path.exists(args.source):
        raise ValueError('{} is not a valid raw_data csv file'.format(args.source))

    # Check output filename
    if args.output is None:
        args.output = args.source[:-4]+'_'

    return args


def main():
    """Main matching_step1.py routine."""
    print('-------------------------------------------------------------------')
    print('MBS - PBS 10% dataset utility: matching_step1.py')
    print('-------------------------------------------------------------------')
    args = init_main()

    # Get raw data files
    rd_file = filter(lambda x: '_raw_data_' in x, os.listdir(args.source))
    rd_file = os.path.join(args.source, rd_file[0])
    rd = jl.load(open(rd_file, 'rb'))
    idx = rd.index  # handy index list

    # Load labels table
    labels = pd.read_csv(os.path.join(args.source, 'labels.csv'),
                         header=0, index_col=0)

    # Init the empty CEM table
    cem_table = pd.DataFrame(columns=['AVG_AGE', 'SEX', 'PINSTATE',
                                      'SEQ_LENGTH', 'CLASS'],
                             index=idx)

    # Define the PINSTATE map
    pinstate_map = {1.: 'ACT+NSW', 2.: 'VIC+TAS',
                    3.: 'NT+SA', 4.: 'QLD', 5.: 'WA'}

    # Let's create the CEM table:
    # 1. Apply the PINSTATE map
    cem_table.loc[idx, 'PINSTATE'] = rd.loc[idx, 'last_pinstate'].map(lambda x: pinstate_map[x])

    # 2. Extract sequence length
    cem_table.loc[idx, 'SEQ_LENGTH'] = rd.loc[idx, 'seq'].apply(lambda x: len(x))

    # 3. Get the average age
    cem_table.loc[idx, 'AVG_AGE'] = rd.loc[idx, 'avg_age']

    # 4. Get gender
    cem_table.loc[idx, 'SEX'] = rd.loc[idx, 'sex']

    # 5. Get the class label
    class_map = {'OTHER': -1, 'METONLY': 0, 'MET+X': 1, 'MET2X': 1}
    cem_table.loc[:, 'CLASS'] = labels.loc[idx, 'LABEL'].map(lambda x: class_map[x])
    cem_table = cem_table.loc[cem_table['CLASS'] >= 0 ,:] # exclude others
    print('* n samples: {}'.format(cem_table.shape[0]))

    # 6. Finally save outputfile
    tail = '.csv' if not args.output.endswith('.csv') else ''
    filename = args.output+'_CEM_table'+tail
    print('* Saving {} '.format(filename), end=' ')
    cem_table.to_csv(filename)
    print(u'\u2713')


################################################################################

if __name__ == '__main__':
    main()
