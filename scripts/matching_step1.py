#!/usr/bin/env python
"""Prepare the dataframe for the R package CEM.

Our aim is to perform sample matching using the R package CEM. The matching
will be performed on the following variables:
    * Average AGE during treatment
    * Gender
    * Last State (VIC, NSW, ...)
    * Length of the extracted sequence

This script simply loads raw sequences and extra info generated by
`extracted_sequences.py` and prepares the dataframe for the R package CEM
(see: https://cran.r-project.org/web/packages/cem/vignettes/cem.pdf)
"""

import argparse
import cPickle as pkl
import os

import pandas as pd
from tqdm import tqdm


def parse_arguments():
    """"Parse input arguments."""
    parser = argparse.ArgumentParser(description='MBS-PBS 10% data/labels '
                                                 'extraction.')
    parser.add_argument('-s', '--source', type=str,
                        help='Raw data generated by `extract_sequences.py` '
                        'source folder.', default=None)
    parser.add_argument('-o', '--output', type=str,
                        help='Ouput file name root.',
                        default=None)
    # parser.add_argument('-nj', '--n_jobs', type=int,
    #                     help='The number of processes to use.', default=4)
    args = parser.parse_args()
    return args


def init_main():
    """Initialize the main routine."""
    args = parse_arguments()

    # Check source directory
    if args.source is None or not os.path.exists(args.source):
        raise ValueError('{} is not a valid raw_data csv file'.format(args.source))

    # Check output filename
    if args.output is None:
        args.output = args.source[:-4]+'_'

    return args


def load_data(dump_files, desc='Loading'):
    """Extract sequences, extra info and patient id from dump pkl."""
    raw_data = []
    extra_info = []
    indexes = []
    for f in tqdm(dump_files, desc=desc):
        _tmp = pkl.load(open(f, 'rb'))
        _raw_data, _extra_info = _tmp['raw_data'], _tmp['extra_info'].set_index('PIN')
        for k in _extra_info.index:
            if len(_raw_data[k]) > 0: # Skip empty sequences
                raw_data.append(_raw_data[k])
                extra_info.append([_extra_info.loc[k]['SEX'], _extra_info.loc[k]['AGE']])
                indexes.append(k)
    return raw_data, extra_info, indexes


def main():
    """Main matching_step1.py routine."""
    print('-------------------------------------------------------------------')
    print('MBS - PBS 10% dataset utility: matching_step1.py')
    print('-------------------------------------------------------------------')
    args = init_main()

    # Get raw data files
    rd_files = filter(lambda x: 'raw_data' in x, os.listdir(args.source))
    pos_rd_files = filter(lambda x: 'class_1' in x, rd_files)
    pos_rd_files = [os.path.join(args.source, rd) for rd in pos_rd_files]
    neg_rd_files = filter(lambda x: 'class_0' in x, rd_files)
    neg_rd_files = [os.path.join(args.source, rd) for rd in neg_rd_files]

    # Load positive class
    pos_raw_data, pos_extra_info, pos_id = load_data(pos_rd_files,
                                                     desc='Processing class 1')
    # Load negative class
    neg_raw_data, neg_extra_info, neg_id = load_data(neg_rd_files,
                                                     desc='Processing class 0')

    # Init the empty CEM table
    cem_table = pd.DataFrame(columns=['AVG_AGE', 'SEX', 'PINSTATE',
                                      'SEQ_LENGTH', 'CLASS'])

    # Let's add the positive samples to the CEM table







################################################################################

if __name__ == '__main__':
    main()
