#!/usr/bin/env python
"""Prepare the dataframe for the R package CEM.

Our aim is to perform sample matching using the R package CEM. The matching
will be performed on the following variables:
    * Average AGE during treatment
    * Gender
    * Last State (VIC, NSW, ...)
    * Length of the extracted sequence

This script simply loads raw sequences and extra info generated by
`extracted_sequences.py` and prepares the dataframe for the R package CEM
(see: https://cran.r-project.org/web/packages/cem/vignettes/cem.pdf)
"""

from __future__ import print_function

import argparse
import cPickle as pkl
import os

import pandas as pd
from tqdm import tqdm


def parse_arguments():
    """"Parse input arguments."""
    parser = argparse.ArgumentParser(description='MBS-PBS 10% data/labels '
                                                 'extraction.')
    parser.add_argument('-s', '--source', type=str,
                        help='Raw data generated by `extract_sequences.py` '
                        'source folder.', default=None)
    parser.add_argument('-o', '--output', type=str,
                        help='Ouput file name root.',
                        default=None)
    args = parser.parse_args()
    return args


def init_main():
    """Initialize the main routine."""
    args = parse_arguments()

    # Check source directory
    if args.source is None or not os.path.exists(args.source):
        raise ValueError('{} is not a valid raw_data csv file'.format(args.source))

    # Check output filename
    if args.output is None:
        args.output = args.source[:-4]+'_'

    return args


def main():
    """Main matching_step1.py routine."""
    print('-------------------------------------------------------------------')
    print('MBS - PBS 10% dataset utility: matching_step1.py')
    print('-------------------------------------------------------------------')
    args = init_main()

    # Get raw data files
    rd_files = filter(lambda x: 'raw_data' in x, os.listdir(args.source))
    pos_rd_files = filter(lambda x: 'class_1' in x, rd_files)
    pos_rd_files = [os.path.join(args.source, rd) for rd in pos_rd_files]
    neg_rd_files = filter(lambda x: 'class_0' in x, rd_files)
    neg_rd_files = [os.path.join(args.source, rd) for rd in neg_rd_files]

    # Init the empty CEM table
    cem_table = pd.DataFrame(columns=['AVG_AGE', 'SEX', 'PINSTATE',
                                      'SEQ_LENGTH', 'CLASS'])

    # Define the PINSTATE map
    pinstate_map = {1.: 'ACT+NSW', 2.: 'VIC+TAS',
                    3.: 'NT+SA', 4.: 'QLD', 5.: 'WA'}

    # Let's add the positive samples to the CEM table
    for f in tqdm(pos_rd_files, desc='Processing Class 1'):
        dump = pkl.load(open(f, 'rb'))
        raw_data, extra_info = dump['raw_data'], dump['extra_info']
        # Apply the PINSTATE map
        extra_info.loc[:, 'PINSTATE'] = [pinstate_map[x] for x in extra_info['PINSTATE'].values]
        # Extract sequence length
        extra_info['SEQ_LENGTH'] = [len(raw_data[k]) for k in raw_data.keys()]
        extra_info['CLASS'] = 1  # fix the class label
        # Update cem_table
        cem_table = pd.concat((cem_table, extra_info[cem_table.columns]))

    # Let's add the negative samples to the CEM table
    for f in tqdm(neg_rd_files, desc='Processing Class 0'):
        dump = pkl.load(open(f, 'rb'))
        raw_data, extra_info = dump['raw_data'], dump['extra_info']
        # Apply the PINSTATE map
        extra_info.loc[:, 'PINSTATE'] = [pinstate_map[x] for x in extra_info['PINSTATE'].values]
        # Extract sequence length
        extra_info['SEQ_LENGTH'] = [len(raw_data[k]) for k in raw_data.keys()]
        extra_info['CLASS'] = 0  # fix the class label
        # Update cem_table
        cem_table = pd.concat((cem_table, extra_info[cem_table.columns]))

    # Save outputfile
    tail = '.csv' if not args.output.endswith('.csv') else ''
    filename = args.output+'_CEM_table'+tail
    print('* Saving {} '.format(filename), end=' ')
    cem_table.to_csv(filename)
    print(u'\u2713')


################################################################################

if __name__ == '__main__':
    main()
